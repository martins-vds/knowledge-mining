{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.27.1.19265",
      "templateHash": "16415120184362306545"
    }
  },
  "parameters": {
    "docsContainerName": {
      "type": "string",
      "defaultValue": "documents"
    },
    "synonymsContainerName": {
      "type": "string",
      "defaultValue": "synonyms"
    },
    "deployFunction": {
      "type": "bool",
      "defaultValue": true
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "servicePrincipalId": {
      "type": "string",
      "defaultValue": ""
    },
    "useExistingVnet": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "powerBiWorkspaceId": {
      "type": "string",
      "defaultValue": ""
    },
    "powerBiReportId": {
      "type": "string",
      "defaultValue": ""
    },
    "powerBiTenantId": {
      "type": "string",
      "defaultValue": ""
    },
    "powerBiClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "powerBiClientSecret": {
      "type": "securestring",
      "defaultValue": ""
    },
    "powerBiFallbackUrl": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "uniqueness": "[uniqueString(resourceGroup().id)]",
    "keyVaultName": "[format('akv-{0}', variables('uniqueness'))]",
    "searchName": "[format('search-{0}', variables('uniqueness'))]",
    "cognitiveAccountName": "[format('cognitive-account-{0}', variables('uniqueness'))]",
    "signalRAccountName": "[format('signalr-{0}', variables('uniqueness'))]",
    "storageAccountNameData": "[format('stg{0}', variables('uniqueness'))]",
    "appServicePlanName": "[format('app-plan-{0}', variables('uniqueness'))]",
    "webAppName": "[format('site-{0}', variables('uniqueness'))]",
    "functionAppName": "[format('function-app-{0}', variables('uniqueness'))]",
    "appInsightsName": "[format('app-insights-{0}', variables('uniqueness'))]",
    "appInsightsWorkspaceName": "[format('workspace-{0}', variables('uniqueness'))]",
    "secretKeySearch": "SEARCHSERVICESECRET",
    "secretKeySignalR": "SIGNALRCONNECTIONSTRING",
    "secretKeyCognitive": "COGNITIVESERVICESSECRET",
    "secretKeyStorageKey": "STORAGEACCOUNTKEYSECRET",
    "secretKeyStorageConnectionString": "STORAGEACCOUNTCONNECTIONSTRING",
    "subnetAppServiceName": "AppService",
    "subnetPrivateEndpointsName": "PrivateEndpoints",
    "ipAddressToAllow": [],
    "blobDataContributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
    "blobDataReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "tenantId": "[subscription().tenantId]",
        "enableSoftDelete": true,
        "enablePurgeProtection": true,
        "softDeleteRetentionInDays": 7,
        "enableRbacAuthorization": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "accessPolicies": "[if(empty(parameters('servicePrincipalId')), createArray(createObject('objectId', reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-06-01', 'full').identity.principalId, 'tenantId', reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-06-01', 'full').identity.tenantId, 'permissions', createObject('secrets', createArray('get')))), createArray(createObject('objectId', parameters('servicePrincipalId'), 'tenantId', subscription().tenantId, 'permissions', createObject('secrets', createArray('get', 'list', 'set', 'delete'))), createObject('objectId', reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-06-01', 'full').identity.principalId, 'tenantId', reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-06-01', 'full').identity.tenantId, 'permissions', createObject('secrets', createArray('get')))))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'STORAGEACCOUNTRESOURCEID')]",
      "properties": {
        "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('secretKeyStorageConnectionString'))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountNameData'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData')), '2019-06-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('secretKeyStorageKey'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData')), '2019-06-01').keys[0].value]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'SEARCHSERVICEENDPOINT')]",
      "properties": {
        "value": "[format('https://{0}.search.windows.net', variables('searchName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Search/searchServices', variables('searchName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('secretKeySearch'))]",
      "properties": {
        "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('searchName')), '2020-08-01').primaryKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Search/searchServices', variables('searchName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('secretKeyCognitive'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveAccountName')), '2017-04-18').key1]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('cognitiveAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('secretKeySignalR'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.SignalRService/signalR', variables('signalRAccountName')), '2022-02-01').primaryConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.SignalRService/signalR', variables('signalRAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2020-08-01",
      "name": "[variables('searchName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "standard"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('cognitiveAccountName')]",
      "location": "[parameters('location')]",
      "kind": "CognitiveServices",
      "sku": {
        "name": "S0"
      }
    },
    {
      "type": "Microsoft.SignalRService/signalR",
      "apiVersion": "2022-02-01",
      "name": "[variables('signalRAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_S1",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "cors": {
          "allowedOrigins": [
            "*"
          ]
        },
        "features": [],
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountNameData')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices, Logging, Metrics",
          "ipRules": "[variables('ipAddressToAllow')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}/{1}', variables('storageAccountNameData'), 'default')]",
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "allowPermanentDelete": false,
          "enabled": true,
          "days": 7
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountNameData'), 'default', parameters('docsContainerName'))]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountNameData'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountNameData'), 'default', parameters('synonymsContainerName'))]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountNameData'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-blob-endpoint', variables('storageAccountNameData'))]",
      "location": "[parameters('location')]",
      "properties": {
        "subnet": {
          "id": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value, variables('subnetPrivateEndpointsName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-blob-endpoint', variables('storageAccountNameData'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', format('{0}-blob-endpoint', variables('storageAccountNameData')), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink_blob_core_windows_net",
            "properties": {
              "privateDnsZoneId": "[reference(resourceId('Microsoft.Resources/deployments', 'private-dns-zone'), '2022-09-01').outputs.id.value]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-endpoint', variables('storageAccountNameData')))]",
        "[resourceId('Microsoft.Resources/deployments', 'private-dns-zone')]"
      ]
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[format('stgfunc{0}', variables('uniqueness'))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "Logging, Metrics"
        }
      }
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-blob-endpoint', format('stgfunc{0}', variables('uniqueness')))]",
      "location": "[parameters('location')]",
      "properties": {
        "subnet": {
          "id": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value, variables('subnetPrivateEndpointsName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('{0}-blob-endpoint', format('stgfunc{0}', variables('uniqueness')))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('stgfunc{0}', variables('uniqueness')))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', format('stgfunc{0}', variables('uniqueness')))]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', format('{0}-blob-endpoint', format('stgfunc{0}', variables('uniqueness'))), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink_blob_core_windows_net",
            "properties": {
              "privateDnsZoneId": "[reference(resourceId('Microsoft.Resources/deployments', 'private-dns-zone'), '2022-09-01').outputs.id.value]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-blob-endpoint', format('stgfunc{0}', variables('uniqueness'))))]",
        "[resourceId('Microsoft.Resources/deployments', 'private-dns-zone')]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "Linux",
      "sku": {
        "tier": "PremiumV3",
        "name": "P1v3",
        "family": "Pv3",
        "capacity": 1,
        "size": "P1v3"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('appInsightsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('appInsightsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('appInsightsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|8.0",
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_Mode",
              "value": "recommended"
            },
            {
              "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES",
              "value": "Microsoft.Azure.SignalR"
            },
            {
              "name": "DiagnosticServices_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "InstrumentationEngine_EXTENSION_VERSION",
              "value": "enabled"
            },
            {
              "name": "SnapshotDebugger_EXTENSION_VERSION",
              "value": "enabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
              "value": "enabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_PreemptSdk",
              "value": "enabled"
            },
            {
              "name": "WEBSITE_DNS_SERVER",
              "value": "168.63.129.16"
            },
            {
              "name": "WEBSITE_VNET_ROUTE_ALL",
              "value": "1"
            },
            {
              "name": "AzureMaps__SubscriptionKey",
              "value": ""
            },
            {
              "name": "Search__Endpoint",
              "value": "[format('https://{0}.search.windows.net', variables('searchName'))]"
            },
            {
              "name": "Search__Credential__Key",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('secretKeySearch'))]"
            },
            {
              "name": "Search__IndexName",
              "value": "km"
            },
            {
              "name": "Search__IndexerName",
              "value": "km-indexer"
            },
            {
              "name": "Search__KeyField",
              "value": "metadata_storage_path"
            },
            {
              "name": "Search__SuggesterName",
              "value": "sg"
            },
            {
              "name": "Search__PageSize",
              "value": "10"
            },
            {
              "name": "Search__IsPathBase64Encoded",
              "value": "true"
            },
            {
              "name": "Azure__SignalR__Enabled",
              "value": "true"
            },
            {
              "name": "Azure__SignalR__ConnectionString",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('secretKeySignalR'))]"
            },
            {
              "name": "Storage__ServiceUri",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData')), '2019-06-01').primaryEndpoints.blob]"
            },
            {
              "name": "Storage__AccountKey",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('secretKeyStorageKey'))]"
            },
            {
              "name": "Storage__ContainerName",
              "value": "[parameters('docsContainerName')]"
            },
            {
              "name": "EntityMap__Facets",
              "value": "keyPhrases, locations"
            },
            {
              "name": "Customizations__Enabled",
              "value": "true"
            },
            {
              "name": "Customizations__OrganizationName",
              "value": "Microsoft"
            },
            {
              "name": "Customizations__OrganizationLogo",
              "value": "~/images/logo.png"
            },
            {
              "name": "Customizations__OrganizationWebSiteUrl",
              "value": "https://www.microsoft.com"
            },
            {
              "name": "EmbeddedReport__WorkspaceId",
              "value": "[parameters('powerBiWorkspaceId')]"
            },
            {
              "name": "EmbeddedReport__ReportId",
              "value": "[parameters('powerBiReportId')]"
            },
            {
              "name": "PowerBi__TenantId",
              "value": "[parameters('powerBiTenantId')]"
            },
            {
              "name": "PowerBi__ClientId",
              "value": "[parameters('powerBiClientId')]"
            },
            {
              "name": "PowerBi__ClientSecret",
              "value": "[parameters('powerBiClientSecret')]"
            },
            {
              "name": "PowerBi__FallbackUrl",
              "value": "[parameters('powerBiFallbackUrl')]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            }
          ]
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Search/searchServices', variables('searchName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('webAppName'), 'virtualNetwork')]",
      "properties": {
        "subnetResourceId": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value, variables('subnetAppServiceName'))]",
        "swiftSupported": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "alwaysOn": true,
          "linuxFxVersion": "DOTNET-ISOLATED|8.0",
          "appSettings": [
            {
              "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_Mode",
              "value": "recommended"
            },
            {
              "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
              "value": "1.0.0"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "DiagnosticServices_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "InstrumentationEngine_EXTENSION_VERSION",
              "value": "enabled"
            },
            {
              "name": "SnapshotDebugger_EXTENSION_VERSION",
              "value": "enabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
              "value": "enabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_PreemptSdk",
              "value": "enabled"
            },
            {
              "name": "WEBSITE_DNS_SERVER",
              "value": "168.63.129.16"
            },
            {
              "name": "WEBSITE_VNET_ROUTE_ALL",
              "value": "1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[if(parameters('deployFunction'), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', format('stgfunc{0}', variables('uniqueness')), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('stgfunc{0}', variables('uniqueness'))), '2019-06-01').keys[0].value), '')]"
            },
            {
              "name": "SynonymsStorage",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('secretKeyStorageConnectionString'))]"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('stgfunc{0}', variables('uniqueness')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'FUNCTIONADMINKEY')]",
      "properties": {
        "value": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', variables('functionAppName'))), '2021-02-01').functionKeys.default]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2021-11-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": "[if(parameters('deployFunction'), createArray(createObject('objectId', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2020-06-01', 'full').identity.principalId, 'tenantId', reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2020-06-01', 'full').identity.tenantId, 'permissions', createObject('secrets', createArray('get')))), createArray())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('deployFunction')]",
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), 'virtualNetwork')]",
      "properties": {
        "subnetResourceId": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value, variables('subnetAppServiceName'))]",
        "swiftSupported": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountNameData'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData')), variables('blobDataReaderRoleDefinitionId'), 'Blob Data Reader')]",
      "properties": {
        "roleDefinitionId": "[variables('blobDataReaderRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.Search/searchServices', variables('searchName')), '2020-08-01', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Search/searchServices', variables('searchName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountNameData'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData')), variables('blobDataContributorRoleDefinitionId'), 'Blob Data Contributor')]",
      "properties": {
        "roleDefinitionId": "[variables('blobDataContributorRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2020-06-01', 'full').identity.principalId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vnet",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": "[if(empty(parameters('vnetName')), createObject('value', format('vnet-{0}', variables('uniqueness'))), createObject('value', parameters('vnetName')))]",
          "useExistingVnet": {
            "value": "[parameters('useExistingVnet')]"
          },
          "vnetResourceGroup": {
            "value": "[parameters('vnetResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.27.1.19265",
              "templateHash": "14368440113521177518"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "useExistingVnet": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetResourceGroup": {
              "type": "string"
            }
          },
          "variables": {
            "subnetAppServiceName": "AppService",
            "subnetPrivateEndpointsName": "PrivateEndpoints"
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingVnet'))]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('subnetAppServiceName')]",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "delegations": [
                        {
                          "name": "appservice-serverfarm",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "[variables('subnetPrivateEndpointsName')]",
                    "properties": {
                      "addressPrefix": "10.0.2.0/24",
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroup')), 'Microsoft.Network/virtualNetworks', parameters('name')), resourceId('Microsoft.Network/virtualNetworks', parameters('name')))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "private-dns-zone",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.27.1.19265",
              "templateHash": "11101492987853309498"
            }
          },
          "parameters": {
            "vnetId": {
              "type": "string"
            }
          },
          "variables": {
            "privateDnsZone": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[variables('privateDnsZone')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[format('{0}/{1}', variables('privateDnsZone'), uniqueString(parameters('vnetId')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZone'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateDnsZone'), uniqueString(parameters('vnetId')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
      ]
    }
  ],
  "outputs": {
    "storage_data_id": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameData'))]"
    },
    "storage_data_name": {
      "type": "string",
      "value": "[variables('storageAccountNameData')]"
    },
    "search_endpoint": {
      "type": "string",
      "value": "[format('https://{0}.search.windows.net', variables('searchName'))]"
    },
    "keyvault_name": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "app_name": {
      "type": "string",
      "value": "[variables('webAppName')]"
    },
    "skills_name": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    }
  }
}