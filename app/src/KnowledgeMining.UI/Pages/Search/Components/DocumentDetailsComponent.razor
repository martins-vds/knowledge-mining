@using System.ComponentModel
@inject ILinkGenerator LinkGenerator;

<MudOverlay Visible="@IsVisible" DarkBackground="true" AutoClose="true">
    <MudContainer>
        <MudPopover Open="@IsVisible" Class="px-4 pt-4" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">
            <div class="d-flex flex-column">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3" Style="max-width: 97vw; width: 97vw; min-height: 60vh;">
                    <MudTabPanel Text="Document Preview">
                        <DocumentViewerComponent DocumentUri="@(LinkGenerator.GenerateDocumentPreviewUrl(Document!.Name))"></DocumentViewerComponent>
                    </MudTabPanel>
                    <MudTabPanel Text="Transcript">
                        <MudGrid>
                            <MudItem xs="12" sm="8">
                                <pre style="max-width: 60vw; max-height: 50vh; width: 60vw; height: 50vh; overflow-x: auto; overflow-y: scroll; white-space: pre-wrap; word-wrap: break-word; ">
                                <MudHighlighter Text="@Document!.Content" HighlightedText="@_textToHighlight" Style="background-color: darkblue; font-weight:bold; color: white"></MudHighlighter>
                                </pre>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <div class="d-flex flex-column flex-shrink-1">
                                    <MudTextField T="string" Immediate="true" Placeholder="Search in transcript" ValueChanged="UpdateTextToHighlight" Variant="Variant.Outlined"></MudTextField>
                                    <MudChipSet SelectedChipChanged="UpdateTextToHighlight" Filter="true" Class="d-flex flex-wrap">
                                        @foreach (var keyPhrase in Document!.KeyPhrases!.Take(5))
                                        {
                                            <MudChip Text="@keyPhrase"></MudChip>
                                        }
                                    </MudChipSet>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                    <MudTabPanel Text="Metadata">
                        <MudTable Items="@Document!.ToDictionary()" Height="50vh" Hover="true" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="true" Virtualize="true" FixedHeader="true">
                            <HeaderContent>
                                <MudTh>Property</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Property">@context.Key</MudTd>
                                <MudTd DataLabel="Value">@ConvertMetadataValueToString(context.Value)</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>
                    <MudTabPanel Text="Chat" Disabled="true">
                        <DocumentChatComponent Context="@Document!.Content" />
                    </MudTabPanel>
                </MudTabs>
                <MudButton OnClick="@ClosePopover" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
            </div>
        </MudPopover>
    </MudContainer>
</MudOverlay>

@code {
    [Parameter]
    public DocumentMetadata? Document { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private string? _textToHighlight;

    private void UpdateTextToHighlight(string searchText)
    {
        _textToHighlight = searchText;
    }

    private void UpdateTextToHighlight(MudChip selectedChip)
    {
        _textToHighlight = selectedChip?.Text ?? string.Empty;
    }

    private string ConvertMetadataValueToString(object? metadataValue)
    {
        if (metadataValue is not null)
        {
            if (metadataValue is IEnumerable<string> values)
            {
                return string.Join(", ", values);
            }
            else
            {
                return metadataValue!.ToString();
            }
        }

        return string.Empty;
    }

    private Task ClosePopover()
    {
        return IsVisibleChanged.InvokeAsync(false);
    }
}
